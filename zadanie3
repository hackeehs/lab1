def bubbleSort(arr): 
for iter_num in range(len(arr)-1,0,-1): 
for idx in range(iter_num): 
if arr[idx]>arr[idx+1]: 
temp = arr[idx] 
arr[idx] = arr[idx+1] 
arr[idx+1] = temp 

def gnomeSort(arr, n): 
index = 0 
while index < n: 
if index == 0: 
index = index + 1 
if arr[index] >= arr[index - 1]: 
index = index + 1 
else: 
arr[index], arr[index-1] = arr[index-1], arr[index] 
index = index - 1 

return arr 

def bucketSort(arr): 
largest = max(arr) 
length = len(arr) 
size = largest / length 

buckets = [[] for _ in range(length)] 
for i in range(length): 
j = int(arr[i] / size) 
if j != length: 
buckets[j].append(arr[i]) 
else: 
buckets[length - 1].append(arr[i]) 

for i in range(length): 
insertion_sort(buckets[i]) 

result = [] 
for i in range(length): 
result = result + buckets[i] 

return result 
def insertion_sort(arr): 
for i in range(1, len(arr)): 
temp = arr[i] 
j = i - 1 
while (j >= 0 and temp < arr[j]): 
arr[j + 1] = arr[j] 
j = j - 1 
arr[j + 1] = temp 

def heapSort (sequence): 

def sift_down (parent, limit): 
item = sequence[parent] 
while True: 
child = (parent « 1) + 1 
if child >= limit: 
break 
if child + 1 < limit and sequence[child] < sequence[child + 1]: # ! 
child += 1 
if item < sequence[child]: # ! 
sequence[parent] = sequence[child] 
parent = child 
else: 
break 
sequence[parent] = item 
# Тело функции heap_sort 
length = len(sequence) 
# Формирование первичной пирамиды 
for index in range((length » 1) - 1, -1, -1): 
sift_down(index, length) 
# Окончательное упорядочение 
for index in range(length - 1, 0, -1): 
sequence[0], sequence[index] = sequence[index], sequence[0] 
sift_down(0, index) 

a = [int(i) for i in input("Введите числа через пробел\n").split()] 
n=len(a) 

print(a) 
b = input('Выберите тип сортировки: 1 - пузырьковая, 2 - гномья, 3 - блочная, 4 - пирамидальная\n') 
if b == '1': 
bubbleSort(a) 
elif b == '2': 
gnomeSort(a, len(a)) 
elif b == '3': 
a=bucketSort(a) 
elif b == '4': 
heapSort(a) 

print(a)
